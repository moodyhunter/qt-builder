name: Test

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  prepare:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, cache: 'sccache', basedir: 'C:\', shell_prepare: '$env:MSYS2_ROOT="$home\scoop\apps\msys2\current"; $env:PATH="$env:MSYS2_ROOT\usr\bin;$env:PATH"' }
          - { os: macos-latest,   cache: 'sccache', basedir: './',  shell_prepare: 'pwd' }
          - { os: ubuntu-latest,  cache: 'ccache',  basedir: './',  shell_prepare: 'pwd' }

    steps:
      - name: Get QtBuildScript
        run: |
          cd ${{ matrix.config.basedir }}
          git clone --verbose https://github.com/moodyhunter/QtBuildScript

      - name: Restore Caches
        uses: actions/cache@v3
        with:
          path: "${{ matrix.config.basedir }}/QtBuildScript/.*cache/"
          # "github.run_id" is unique, which causes the cache to always get
          # saved at the end of a successful run.
          key:  ccache-${{ matrix.config.os }}-${{ github.ref }}-${{ github.run_id }}
          # As the unique "key" above will never be found in the cache when the
          # job starts, we need these broader "restore-keys" in order to match
          # and restore the most recent cache.
          restore-keys: |
            ccache-${{ matrix.config.os }}-${{ github.ref }}-
            ccache-${{ matrix.config.os }}-

      - name: Setup Windows Environment
        if: runner.os == 'Windows'     
        uses: MinoruSekine/setup-scoop@main
        with:
          add_extras_bucket: true
 
      - name: Install Packages - Windows
        if: runner.os == 'Windows'
        run: |
          scoop install msys2 cmake ninja sccache
          msys2

      - name: Process Installed Packages - Windows
        if: runner.os == 'Windows'
        run: |
          ${{ matrix.config.shell_prepare }}
          pacman --noconfirm -Sy fish

      - name: Setup MSVC Developer Environment - Windows
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Install Packages - Linux
        if: runner.os == 'Linux'
        run: |
          export DISTRO=$(lsb_release -sc)
          echo "deb http://archive.ubuntu.com/ubuntu/ $DISTRO main universe" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://archive.ubuntu.com/ubuntu/ $DISTRO main universe" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          # sudo apt upgrade -y
          sudo apt-get build-dep qtbase5-dev qtdeclarative5-dev qttools5-dev qttools5-dev-tools qtwayland5-dev-tools
          sudo apt-get install -y fish cmake ninja-build ccache
          sudo apt-get install -y libclang-11-dev

      - name: Install Packages - macOS
        if: runner.os == 'macOS'
        run: |
          brew install fish cmake ninja sccache

      - name: Setup kits
        shell: bash
        working-directory: ${{ matrix.config.basedir }}
        run: |
          cd ./QtBuildScript
          git submodule update --init
          echo '${{ matrix.config.cache }}' > .base-kits
          echo 'shared' >> .base-kits
          echo 'release' >> .base-kits
          # echo 'tests' >> .base-kits
          # echo 'examples' >> .base-kits

      - name: Update Qt
        working-directory: ${{ matrix.config.basedir }}
        run: |
          cd ./QtBuildScript
          ${{ matrix.config.shell_prepare }}
          fish ./update-qt.fish

      - name: Build Qt
        working-directory: ${{ matrix.config.basedir }}
        run: |
          cd ./QtBuildScript
          ${{ matrix.config.shell_prepare }}
          fish ./build-qt.fish

      - name: Package
        working-directory: ${{ matrix.config.basedir }}
        run: |
          cd ./QtBuildScript
          ${{ matrix.config.shell_prepare }}
          fish ./utils/package.fish
